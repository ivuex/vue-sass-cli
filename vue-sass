#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const Base64 = require('js-base64').Base64;

const fnActualFile = require('./utils/fnActualFile')

const passInName = process.argv[2];

// function Hash() {
//
// }
const fnHashRule = function (s) {
    /*
    function fnHashRule, this function can be comstom free, gen comstom hash.
    If not comstom, just passing in argument can also comstom hash.
    Usage:  vue-sass name --hash-src=myhash
     */

    // return Base64.encodeURI(s);
    // return Base64.encode(s);
    return Base64.encode(s).substr(0, 5);
};
const htmlIdHashSrcArgu = process.argv[3] || '';
const htmlIdHashReg = /^--hash-src=([-\w]+)$/;

function checkhtmlIdHashSrcArgu() {
    if (htmlIdHashReg.test(htmlIdHashSrcArgu)) {
        console.error('指定hash只能用以下格式: “--hash-src=hashSrc”, 等号后必须是字母，数字，下划线或者短横线.');
    }
}

checkhtmlIdHashSrcArgu();

//below line output is for UI, in order to fetch good feeling.
console.log('vue-sass-cli is creating the directory structure for static-html-sub-compile.');

function checkPassInName() {
    if (/^(?:[-_\.0-9]|[-_\.0-9])$/.test(passInName)) {
        console.error('项目名不能以“－”或“_”或“.”结尾, 请修改.');
    }
    if (/[-_][-_]/.test(passInName)) {
        console.error('项目名不能包含连续的“－” 或/和 “_”,　请修改.');
    }
    if (!/[\w\-\.]+/.test(passInName)) {
        console.error('项目名不能包含连续的只能由大小写字母、数字、“－”、“_”组成,　请修改.');
    }
    if (/-/.test(passInName) && /[A-Z]/.test(passInName)) {
        console.error('项目名不能同时包含“－”和大写字母,　请修改.');
    }
    if (/[\u4e00-\u9fa5]/.test(passInName)) {
        console.error('项目名不能包含的中文字符,　请修改.')
    }
}

checkPassInName();

function computeNames() {
    let hyphenName = '';
    let pascalCaseName = '';
    let camelCaseName = '';
    let htmlIdHash = '';
    if (/-/.test(passInName)) {
        hyphenName = passInName;
        tmpCamelCase = passInName.replace(/-([a-z])/g, function () {
            return arguments[1].toUpperCase();
        });
    } else {
        hyphenName = passInName.replace(/([A-Z])/g, function () {
            return '-' + arguments[1].toLowerCase();
        });
        tmpCamelCase = passInName;
    }
    pascalCaseName = tmpCamelCase.replace(/^([a-zA-Z])/, function () {
        return arguments[1].toUpperCase()
    });
    camelCaseName = tmpCamelCase.replace(/^([a-zA-Z])/, function () {
        return arguments[1].toLowerCase()
    });
    htmlIdHash = htmlIdHashSrcArgu.replace(/--hash-src=([-\w]+)/, function () {
        return '--' + fnHashRule(arguments[1]);
    });
    return {
        passInName,
        hyphenName,
        pascalCaseName,
        camelCaseName,
        htmlIdHash,
    }
}

const names = computeNames();

const srcDirectory = './' + 'vue-sass.d';
console.error(srcDirectory);
// const srcDirectory = './src';
const distDirectory = './' + names.passInName;
const stableDirBasename = '.stable';
const srcStableDirectory = srcDirectory + '/' + stableDirBasename;
const distStableDirectory = distDirectory + '/' + stableDirBasename;

const template = {
    sass: require(srcDirectory + '/component-name.sass.js'),
    vue: require(srcDirectory + '/componentName.vue.js'),
    js: require(srcDirectory + '/componentName.js.js'),
    html: require(srcStableDirectory + '/template.html.js'),
    scss: require(srcStableDirectory + '/index.scss.js'),
};

function fnGenTaskObj() {
    const replaceStrPairsObj = {
        'componentName': names.camelCaseName,
        'component-name': names.hyphenName,
        '--hash': names.htmlIdHash,
    };
    const fsActionObj = {
        createDirSync(newDirPath) {
            return new Promise((resolve, reject) => {
                fs.mkdir(newDirPath, (err)=>{
                    if(err) reject(err);
                    resolve(newDirPath + ' directory has been created.');
                });
            });
        },
        genActualFile(srcPath, distinationPath, replaceStrPairsObj) {
            console.log('If you can see this line ,the fs.ActionOjb.genActualFile function executed.');
            console.log(arguments);
            console.log('above is the arguments in the fs.ActionOjb.genActualFile function.');
            // return new Promise((resolve, reject) => {
                fnActualFile(...arguments)();
            // })
        }
    };
    fsActionObj.createDirSync(names.passInName).then(function (msg) {
        console.log(msg);
        console.log('If you can see this line ,the callback function executed begain at 129 line executed.');
            fsActionObj.genActualFile(template['js'], `${distDirectory}/${names.camelCaseName}.js`, replaceStrPairsObj);
            fsActionObj.genActualFile(template['vue'], `${distDirectory}/${names.camelCaseName}.vue`, replaceStrPairsObj);
            fsActionObj.genActualFile(template['sass'], `${distDirectory}/${names.camelCaseName}.sass`, replaceStrPairsObj);
        fsActionObj.createDirSync(distStableDirectory).then(function (msg) {
                fsActionObj.genActualFile(template['scss'], `${distStableDirectory}/index.scss`, replaceStrPairsObj);
                fsActionObj.genActualFile(template['html'], `${distStableDirectory}/template.html`, replaceStrPairsObj);
                // fsActionObj.genActualFile(template['scss'], `${distDirectory}//index.scss`, replaceStrPairsObj),
                // fsActionObj.genActualFile(template['html'], `${distDirectory}/template.html`, replaceStrPairsObj),
        })
    }).then(function () {
        console.log('Done!');
    }).catch(err=>{
        console.log(err);
    });
}

fnGenTaskObj();
